name: Python application

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  actions: write
  checks: write
  pull-requests: write
  packages: write
  id-token: write

env:
  PYTHONPATH: ${{ github.workspace }}
  PYTHONUNBUFFERED: 1

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9"]

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        python -m pip install --upgrade pip
        pip install wheel setuptools
        pip install rdflib==7.1.1 PyLD==2.0.3 jsonschema==4.23.0
        pip install case_utils==0.16.0
        pip install -r requirements.txt
        pip list
        python -c "import case_utils; print('case_utils version:', case_utils.__version__); from case_utils.case_validate import validate; print('Validation module loaded successfully')"
    
    - name: Create output directory
      run: |
        mkdir -p output
        ls -la data/
        echo "Input file contents:"
        cat data/NSRL-CAID-ART.json
        echo -e "\nChecking JSON validity:"
        python -c "import json; print(json.dumps(json.load(open('data/NSRL-CAID-ART.json')), indent=2))"
    
    - name: Check formatting with black
      run: |
        black --version
        black --check --diff .
    
    - name: Type checking with mypy
      run: |
        mypy --version
        mypy --ignore-missing-imports --no-strict-optional .
    
    - name: Run NSRL to UCO conversion
      run: |
        python --version
        echo "Converting NSRL-CAID-ART.json..."
        python -X dev nsrl_to_uco.py data/NSRL-CAID-ART.json --debug
    
    - name: Validate UCO output
      if: always()
      run: |
        echo "Validating output file..."
        ls -la output/
        if [ -f output/uco-NSRL-CAID-ART.json ]; then
          echo "Output file exists and has size:"
          stat output/uco-NSRL-CAID-ART.json
          echo "Output file contents:"
          python -c "import json; print(json.dumps(json.load(open('output/uco-NSRL-CAID-ART.json')), indent=2))"
          echo "Validating with case_utils..."
          python -c "import sys; import case_utils; from case_utils.case_validate import validate; print('Python version:', sys.version); print('case_utils version:', case_utils.__version__); print('Python path:', sys.path); print('Installed packages:', sorted(list(__import__('pkg_resources').working_set.by_key.keys()))); print('Validating against CASE 1.3.0...'); try: validate('output/uco-NSRL-CAID-ART.json', case_version='case-1.3.0', ontology_version='1.3.0', debug=True); print('Validation successful'); except Exception as e: print('Validation error:', str(e)); raise"
        else
          echo "Output file not found!"
          exit 1
        fi 